#!/usr/local/bin/smalltalk/gemstone/st_topaz_launcher
#
# Perform a Gemstone restore from backup
#  SYNOPSIS
# 	restore.tpz <image-name> -- [ <topaz-args> ] -- <backup-file-path>
#
#  EXAMPLES
#  	restore.tpz gs_350 -- -lq -- ./backups/extent0.st_launcher.dbf
#

iferr 1 stk
# comment out following line to debug interactively
iferr 2 exit 

login

expectvalue true
run
	| cmdLineArgs scriptArgsIndex backupPath status count |

	cmdLineArgs := System commandLineArguments.
	scriptArgsIndex := cmdLineArgs indexOf: '--'.

	(cmdLineArgs size = scriptArgsIndex)
		ifTrue: [ GsFile stderr nextPutAll: 'backup file path must be specified'; lf. ^false ].

	backupPath := cmdLineArgs at: scriptArgsIndex + 1.

	(GsFile existsOnServer: backupPath)
		ifFalse: [ GsFile stderr nextPutAll: 'The backup file ', backupPath printString, ' does not exist.'; lf. ^ false ].

	status := SystemRepository restoreStatus.
	status = 'Restore is not active.'
		ifFalse: [ GsFile stderr nextPutAll: 'System is already in restore mode: ' , status; lf. ^false ].
	System stopUserSessions.
	count := 0.
	[ 
	| sessionCount |
	sessionCount := 0.
	System currentSessions
		do: [ :index | 
			| id sessionArray |
			sessionArray := System descriptionOfSession: index.
			id := (sessionArray at: 1) userId.
			(id = 'GcUser' or: [ id = 'SymbolUser' ])
				ifFalse: [ sessionCount := sessionCount + 1 ] ].
	count < 30 and: [ sessionCount > 1 ] ]
		whileTrue: [ 
			(Delay forSeconds: 1) wait.
			count := count + 1 ].
	count >= 30
		ifTrue: [ 
			GsFile stderr nextPutAll: 'Could not restore from backup because there are still sessions logged in.'; lf.
			^ false ].

  GsFile stderr
    nextPutAll: '---Starting restore from ' , backupPath printString , ' (', DateAndTime now printString, ')';
		lf.
 	[SystemRepository restoreFromBackup: backupPath ]
		on: Error
		do: [:ex |
			ex gsNumber  ~~ 4046
        ifTrue: [ ^ ex pass ].
      GsFile stderr
       	nextPutAll: ex description;
				lf ].
%
# restore from backup does a logout, so log back in and do the commit restore step
login

expectvalue true
run
	| status index |
	status := SystemRepository restoreStatus.
	index := status 
			findString: 'Restoring from transaction log files' 
			startingAt: 1 
			caseSensitive: false.
	index > 1
		ifTrue: [ GsFile stderr nextPutAll: 'System is not prepared to commit restore: ', status; lf. ^false ].
	GsFile stderr
		nextPutAll: 'Performing commitRestore ... log in again to start using the restored system';
		lf.
	status := SystemRepository commitRestore.
	"normally terminates the session"
	^self error: 'Commit restore failed: ', status
%

exit

