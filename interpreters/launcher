#!/usr/bin/env bash
#
# Args:
# 	<stash-file-path> [ [<image-name> [ <vm-args> ] ] -- ] [ <script-args> ]
#

. $HOME/.st_launcher/st_launcher_default.env

stashFile=`realpath $1`
shift
imageName=""
vmArgs=""
scriptArgs=""
debugCommandError="false"

if [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "gemstone" ] ; then
	inputFile=`mktemp`
	cat - > $inputFile << EOF

	iferr 1 stk

	set user SystemUser
	set password swordfish

	set solologin on
	login

	run
"fabricate a topaz command line for executing the stashFile using a solo extent"
	| imagePath imageName stashFilename cmdLine imageProperties structureProperties
 		interpreterCommandLineArgs idx tokens vmArgs |
	stashFilename := '$stashFile'.

	interpreterCommandLineArgs := '$*'.
	vmArgs := ''.
	tokens := interpreterCommandLineArgs subStrings.
	idx := tokens indexOf: '--'.
	idx > 0
		ifTrue: [
			1 to: idx -1 do: [:i |
				| arg |
				arg := tokens at: i.
				(arg findString: '-' startingAt: 1) = 1
					ifTrue: [ 
						vmArgs := vmArgs, ' ', arg ] ] ].
	vmArgs isEmpty ifTrue: [ vmArgs := ' -lq' ].
	
	structureProperties := StLauncherProperties defaultPropertyFile.
	imageName := structureProperties defaultImageName.
	imagePath := (StLauncherPlatform 
		imageNamed: imageName 
		ifAbsent: [ self error: 'No image named ', imageName printString, ' found ' ]) asFileReference.
	imageProperties := StLauncherProperties propertyFile: imagePath / StLauncherImageProperties defaultPropertyFilename.
	GsFile stdout 
		nextPutAll: (imageProperties productDirectory / 'bin' / 'topaz' ) pathString;
		nextPutAll: vmArgs, ' -C "GEM_SOLO_EXTENT=';
		nextPutAll: imageProperties soloSnapshot;
		lf;
		yourself.
%
exit 
EOF
	export GEMSTONE="$ST_LAUNCHER_DEFAULT_PRODUCT_PATH"
	scriptCmdLine=`$GEMSTONE/bin/topaz -lq -C "GEM_SOLO_EXTENT=$ST_LAUNCHER_DEFAULT_IMAGE_PATH/snapshots/extent0.solo_350.dbf" -S $inputFile`
elif [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "pharo" ] ; then
	echo "PHARO not supported ... yet"
	exit 1
else
	echo "\$ST_LAUNCHER_DEFAULT_PLATFORM not defined"
	exit 1
fi

file=`mktemp`
cat - > $file << EOF
	iferr 1 stk

	$solo
	login

	run
	[
		StashScript
			loadAndExecuteScriptClassFile: '$stashFile'
			stashArgs: '$scriptArgs'
			topazArgs: '$vmArgs'
			workingDir: '$pwd'
			projectName: '__EXECUTE_STASH_SCRIPT_PROJECT__'
			packageName: '__EXECUTE_STASH_SCRIPT_PACKAGE__'
			symDictName: '_EXECUTE_STASH_SCRIPT_SymbolDict__' ]
		on: StashCommandError
		do: [:ex |
			$debugCommandError
				ifTrue: [ ex pass ]
				ifFalse: [ 
					StashScript 
						ansiRedOn: GsFile stdout 
						during: [ GsFile stdout nextPutAll: ex description ].
					GsFile stdout lf	] ]
%
EOF

$scriptCmdLine -S $file
