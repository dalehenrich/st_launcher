#!/usr/bin/env bash
#
# launcher [launcher/vm args] scriptName [launcher/vm args] [--] [script args]
#
#		The launcher/vm args may not use positional arguments. The scriptName is the
#			first positional parameter on a command line.
#		If the same argument is provided in each set of [launcher/vm args], the last 
#			version should override any previous versions.
#		If the script requires an argument of '--', the optional '--' delimer must 
#			be specified to ensure the launcher does the right thing

. $HOME/.st_launcher/st_launcher_default.env

stashFile=`realpath $1`
shift
scriptArgs=""
launcherVmArgs=""

interpArgs="$*"

for argument in $@ ; do
	if [ "$argument" = "--" ] ; then
		launcherVmArgs=$scriptArgs
		scriptArgs=""
	else
		scriptArgs+=" $argument"
	fi
done

debugCommandError="false"
myVmArgs="-lq"
for argument in $launcherVmArgs ; do
	case "$argument" in
		-D) debugCommandError="true" ;;
		-V) set -x; myVmArgs="-l";;
		*);;
	esac
done

if [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "gemstone" ] ; then
	inputFile=`mktemp`
	cat - > $inputFile << EOF

	iferr 1 stk

	set user SystemUser
	set password swordfish

	set solologin on
	login

	run
	| launcherArgMap |
	launcherArgMap := Dictionary new
		at: '-D' put: #none;	"debug StashCommandErrors"
		at: '-V' put: #none;	"list script execution"
		yourself.
	StLauncherPlatform generateVmScriptLaunchCommandLineFrom: '$interpArgs' launcherArgMap: launcherArgMap
%
exit 
EOF
	export GEMSTONE="$ST_LAUNCHER_DEFAULT_PRODUCT_PATH"
	scriptCmdLine=`$GEMSTONE/bin/topaz $myVmArgs -C "GEM_SOLO_EXTENT=$ST_LAUNCHER_DEFAULT_SNAPSHOT_PATH" -S $inputFile`
elif [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "pharo" ] ; then
	echo "PHARO not supported ... yet"
	exit 1
else
	echo "\$ST_LAUNCHER_DEFAULT_PLATFORM not defined"
	exit 1
fi

file=`mktemp`
cat - > $file << EOF
	iferr 1 stk

	$solo
	login

	run
	[
		StashScript
			loadAndExecuteScriptClassFile: '$stashFile'
			stashArgs: '$scriptArgs'
			topazArgs: ''	"not used"
			workingDir: '$pwd'
			projectName: '__EXECUTE_STASH_SCRIPT_PROJECT__'
			packageName: '__EXECUTE_STASH_SCRIPT_PACKAGE__'
			symDictName: '_EXECUTE_STASH_SCRIPT_SymbolDict__' ]
		on: StashCommandError
		do: [:ex |
			$debugCommandError
				ifTrue: [ ex pass ]
				ifFalse: [ 
					StashScript 
						ansiRedOn: GsFile stdout 
						during: [ GsFile stdout nextPutAll: ex description ].
					GsFile stdout lf	] ]
%
EOF

$scriptCmdLine -S $file
