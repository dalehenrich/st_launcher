#!/usr/bin/env bash
#
#

usage() {
  cat <<HELP
USAGE: $(basename $0) scriptPath [ imageName [-H] [-D] [-V] [topaz vm args] -- ] [script args]
       $(basename $0) scriptPath [ imageName [-H] [-D] [-V] [topaz vm args] --   [script args] -- [non-option script args] 

If topaz arguments are specified the <imageName> is required to be the first 
argument following the <scriptPath>.

The $(basename $0) options may be interspersed with the topz vm args as of
GemStone 3.5.0.

If the script expects to use '--' to terminate it's argument parsing, then a 
'--' must precede the script arguments on the command line.

OPTIONS
  -D
     Bring up topaz debugger for StashCommandError exceptions. Normally these exceptions result in
     an error message to sderr.
  -H
     Display help message and exit.
  -V
     Verbose output

EXAMPLES
  $(basename $0) -H                           # this message
  $(basename $0) ./hello.st solo_350 -h --    # topaz help message
  $(basename $0) ./hello.st solo_350 -- -h    # hello.st help message using solo_350 image
  $(basename $0) ./hello.st -- -h             # hello.st help message using default image
  $(basename $0) ./hello.st -h                # hello.st help message using  image
  $(basename $0) ./hello.st solo_350 -D -- -x # run hello.st and bring up topaz debugger in event of a command error

HELP
}

. $HOME/.st_launcher/st_launcher_default.env

stashFile=`realpath $1`
shift
scriptArgs=""
launcherVmArgs=""

interpArgs="$*"

for argument in $@ ; do
	if [ "$argument" = "--" ] ; then
		launcherVmArgs=$scriptArgs
		scriptArgs=""
	else
		scriptArgs+=" $argument"
	fi
done

debugCommandError="false"
for argument in $launcherVmArgs ; do
	case "$argument" in
		-D) debugCommandError="true" ;;
		-H) usage; exit 0;;
		-V) set -x;;
		*);;
	esac
done

if [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "gemstone" ] ; then
	inputFile=`mktemp`
	cat - > $inputFile << EOF

	iferr 1 stk

	set user SystemUser
	set password swordfish

	set solologin on
	login

	run
	| launcherArgMap |
	launcherArgMap := Dictionary new
		at: '-D' put: #none;	"debug StashCommandErrors"
		at: '-V' put: #none;	"list script execution"
		yourself.
	StLauncherPlatform generateVmScriptLaunchCommandLineFrom: '$interpArgs' launcherArgMap: launcherArgMap
%
exit 
EOF
	export GEMSTONE="$ST_LAUNCHER_DEFAULT_PRODUCT_PATH"
	scriptCmdLine=`$GEMSTONE/bin/topaz -lq -C "GEM_SOLO_EXTENT=$ST_LAUNCHER_DEFAULT_SNAPSHOT_PATH" -S $inputFile`
elif [ "$ST_LAUNCHER_DEFAULT_PLATFORM" = "pharo" ] ; then
	echo "PHARO not supported ... yet"
	exit 1
else
	echo "\$ST_LAUNCHER_DEFAULT_PLATFORM not defined"
	exit 1
fi

file=`mktemp`
cat - > $file << EOF
	iferr 1 stk

	$solo
	login

	run
	[
		StashScript
			loadAndExecuteScriptClassFile: '$stashFile'
			stashArgs: '$scriptArgs'
			topazArgs: ''	"not used"
			workingDir: '$pwd'
			projectName: '__EXECUTE_STASH_SCRIPT_PROJECT__'
			packageName: '__EXECUTE_STASH_SCRIPT_PACKAGE__'
			symDictName: '_EXECUTE_STASH_SCRIPT_SymbolDict__' ]
		on: StashCommandError
		do: [:ex |
			$debugCommandError
				ifTrue: [ ex pass ]
				ifFalse: [ 
					StashScript 
						ansiRedOn: GsFile stdout 
						during: [ GsFile stdout nextPutAll: ex description ].
					GsFile stdout lf	] ]
%
EOF

$scriptCmdLine -S $file
